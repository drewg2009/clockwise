// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using CoreGraphics;

namespace Clockwise.iOS
{
	public partial class ViewController : UIViewController
	{
		private bool settingsExpanded = false;
		private List<UIButton> extraSettingButtons;
		private List<Module> moduleList;


		public ViewController(IntPtr handle) : base(handle)
		{
			extraSettingButtons = new List<UIButton>();

		}

		private void addButtonsToList()
		{
			extraSettingButtons.Add(settingsSnoozeButton);
			extraSettingButtons.Add(settingsAboutButton);
			extraSettingButtons.Add(settingsOrderButton);
			extraSettingButtons.Add(settingsSpeechButton);
			extraSettingButtons.Add(settingsToneButton);
			moduleList =  new List<Module>();


		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

		}

		private void addModuleBoxes()
		{
			int counter = 0;
			while (counter < moduleList.Count)
			{
				int xFactor = (counter + 1);
				nfloat padding = 10.0f;
				UIView moduleView = new UIView();
				var frame = new CGRect();
				frame.Height = moduleScrollView.Frame.Height - 20;
				frame.Width = moduleScrollView.Frame.Width - 40;
				frame.X = padding * xFactor + (counter* moduleScrollView.Frame.Width);
				frame.Y = 0;
				moduleView.Frame = frame;
				moduleView.BackgroundColor = UIColor.Black;
				moduleScrollView.Add(moduleView);
				counter++;
			}
			var contentSize= moduleScrollView.ContentSize;
			contentSize.Width = moduleScrollView.Frame.Width * moduleList.Count;
			moduleScrollView.ContentSize = contentSize;
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);

			addButtonsToList();
			hideButtons();

			moduleList.Add(new Module());
			moduleList.Add(new Module());
			moduleList.Add(new Module());
			moduleList.Add(new Module());
			//moduleList.Add(new Module());

			addModuleBoxes(); 


			alarmToggle.TouchUpInside += delegate
			{
				Console.WriteLine("toggle alarm");
			};

			settingsButton.TouchUpInside += delegate
			{
				Console.WriteLine("settings button");
				toggleSettingsAnimation();
			};

			addModuleButton.TouchUpInside += delegate
			{
				Console.WriteLine("add module");
			};
		}

		public override void DidReceiveMemoryWarning()
		{
			base.DidReceiveMemoryWarning();
		}

		private void toggleAlarmSettingBtns()
		{

			if (settingsExpanded)
			{
				hideButtons();
			}
			else
			{
				showButtons();
			}
		}

		private void hideButtons()
		{
			foreach (UIButton b in extraSettingButtons)
			{
				var frame = b.Frame;
				frame.Height = 0;
				b.Frame = frame;
			}
		}

		private void showButtons()
		{

			var buttonHeight = 35;

			foreach (UIButton b in extraSettingButtons)
			{
				var frame = b.Frame;
				frame.Height = buttonHeight;
				b.Frame = frame;
			}

		}

		private void toggleSettingsAnimation()
		{
			UIView.Animate(.2, () =>
				 {
				//animate by getting the current frame in a variable, changing it, and reassigning it


					 var frame = alarmButtonsContainer.Frame;
					 var frame2 = pullDownMenu.Frame;
					 int factor = 50;
					 int change = settingsExpanded ? -factor : factor ;

					 frame.Height = alarmButtonsContainer.Frame.Height + change;
					 frame2.Y += change;

					 alarmButtonsContainer.Frame = frame;
					 pullDownMenu.Frame = frame2;
					 toggleAlarmSettingBtns();

					 settingsExpanded = !settingsExpanded; //toggle expansion flag
				 }
			  );
		}



	}
}
